using System.Collections.Generic;
using System.Linq;
using model;
using OCP;

namespace OC.Files.Cache
{

/**
 * Handle the mapping between the string and numeric storage ids
 *
 * Each storage has 2 different ids
 *    a string id which is generated by the storage backend and reflects the configuration of the storage (e.g. "smb://user@host/share")
 *    and a numeric storage id which is referenced in the file cache
 *
 * A mapping between the two storage ids is stored in the database and accessible trough this class
 *
 * @package OC\Files\Cache
 */
    class StorageGlobal {
        /** @var IDBConnection */
        private IDBConnection connection;

        /** @var array[] */
        private IDictionary<string, StoragesTable> cache = new Dictionary<string, StoragesTable>();

        public StorageGlobal(IDBConnection connection) {
            this.connection = connection;
        }

        /**
         * @param string[] storageIds
         */
        public void loadForStorageIds(IList<string> storageIds) {
            var result = new List<StoragesTable>();
            using (var context = new NCContext())
            {
                // TODO @focus
                result = context.Storages.Where((item, index) => storageIds.Contains(item.id)).ToList();

            }
            foreach (var storagesTable in result)
            {
                this.cache[storagesTable.id] = storagesTable;

            }
        }

        /**
         * @param string storageId
         * @return array|null
         */
        public StoragesTable getStorageInfo(string storageId) {
            if (!this.cache.ContainsKey(storageId))
            {
                this.loadForStorageIds(new List<string>(){storageId});
            }
            return this.cache.ContainsKey(storageId) ? this.cache[storageId] : null;
        }

        public void clearCache() {
            this.cache.Clear();
        }
    }

}