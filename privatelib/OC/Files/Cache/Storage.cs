using System;
using System.Collections.Generic;
using System.Linq;
using ext;
using model;

namespace OC.Files.Cache
{
/**
 * Handle the mapping between the string and numeric storage ids
 *
 * Each storage has 2 different ids
 * 	a string id which is generated by the storage backend and reflects the configuration of the storage (e.g. "smb://user@host/share")
 * 	and a numeric storage id which is referenced in the file cache
 *
 * A mapping between the two storage ids is stored in the database and accessible trough this class
 *
 * @package OC.Files.Cache
 */
    class Storage
    {
        /** @var StorageGlobal|null */
        private static StorageGlobal globalCache = null;
        private string storageId;
        private long numericId;

        /**
         * @return StorageGlobal
         */
        public static StorageGlobal getGlobalCache()
        {
            if (globalCache == null)
            {
                globalCache = new StorageGlobal(OC::server.getDatabaseConnection());
            }

            return globalCache;
        }

        /**
         * @param .OC.Files.Storage.Storage|string storage
         * @param bool isAvailable
         * @throws .RuntimeException
         */
        public Storage(OC.Files.Storage.Storage storage, bool isAvailable = true)
        {
            this.storageId = storage.getId();
            this.storageId = adjustStorageId(this.storageId);

            if (row = self::getStorageById(this.storageId))
            {
                this.numericId = (int) row["numeric_id"];
            }
            else
            {
                connection = .OC::server.getDatabaseConnection();
                available = isAvailable ? 1 : 0;
                if (connection.insertIfNotExist("*PREFIX*storages", ["id" => this.storageId, "available" => available])
                    ) {
                    this.numericId = (int) connection.lastInsertId("*PREFIX*storages");
                } else {
                    if (row = self::getStorageById(this.storageId))
                    {
                        this.numericId = (int) row["numeric_id"];
                    }
                    else
                    {
                        throw new .RuntimeException(
                            "Storage could neither be inserted nor be selected from the database");
                    }
                }
            }
        }

        /**
         * @param string storageId
         * @return array
         */
        public static StoragesTable getStorageById(string storageId)
        {
            return getGlobalCache().getStorageInfo(storageId);
        }

        /**
         * Adjusts the storage id to use md5 if too long
         * @param string storageId storage id
         * @return string unchanged storageId if its length is less than 64 characters,
         * else returns the md5 of storageId
         */
        public static string adjustStorageId(string storageId)
        {
            if (storageId.Length > 64)
            {
                return StringUtility.MD5(storageId);
            }

            return storageId;
        }

        /**
         * Get the numeric id for the storage
         *
         * @return int
         */
        public long getNumericId()
        {
            return this.numericId;
        }

        /**
         * Get the string id for the storage
         *
         * @param int numericId
         * @return string|null either the storage id string or null if the numeric id is not known
         */
        public static string getStorageId(long numericId)
        {
            using (var context = new NCContext())
            {
                // TODO @focus
                var result = context.Storages.Where(o => o.numeric_id == numericId).ToList().FirstOrDefault();
                return result?.id;
            }
        }

        /**
         * Get the numeric of the storage with the provided string id
         *
         * @param storageId
         * @return int|null either the numeric storage id or null if the storage id is not knwon
         */
        public static long getNumericStorageId(string storageId)
        {
            storageId = adjustStorageId(storageId);
            var result = getStorageById(storageId);
            return result.numeric_id;
        }

        /**
         * @return array|null [ available, last_checked ]
         */
        public IDictionary<string, object> getAvailability()
        {
            var result = getStorageById(this.storageId);
            if (result != null)
            {
                return new Dictionary<string, object>
                {
                    {"available", result.available == 1},
                    {"last_checked", result.last_checked}
                };
            }
            else
            {
                return null;
            }
        }

        /**
         * @param bool isAvailable
         */
        public void setAvailability(bool isAvailable)
        {
            using (var context = new NCContext())
            {
                // TODO @focus
                var result = context.Storages.Where(o => o.id == this.storageId).ToList();
                foreach (var r in result)
                {
                    r.available = isAvailable ? 1 : 0;
                    r.last_checked = TimeUtility.GetTimestampFormNow();
                }

                context.SaveChanges();
            }
//            sql = "UPDATE `*PREFIX*storages` SET `available` = ?, `last_checked` = ? WHERE `id` = ?";
//            available = isAvailable ? 1 : 0;
//                OC_DB::executeAudited(sql, array(available, time(), this.storageId));
        }

        /**
         * Check if a string storage id is known
         *
         * @param string storageId
         * @return bool
         */
        public static function exists(storageId)
        {
            return !is_null(self::getNumericStorageId(storageId));
        }

        /**
         * remove the entry for the storage
         *
         * @param string storageId
         */
        public static function remove(storageId)
        {
            storageId = self::adjustStorageId(storageId);
            numericId = self::getNumericStorageId(storageId);
            sql = "DELETE FROM `*PREFIX*storages` WHERE `id` = ?";
                .OC_DB::executeAudited(sql, array(storageId));

            if (!is_null(numericId))
            {
                sql = "DELETE FROM `*PREFIX*filecache` WHERE `storage` = ?";
                    .OC_DB::executeAudited(sql, array(numericId));
            }
        }
    }
}