using System.Collections.Generic;
using System.Linq;
using model;
using OCP;

namespace OC.Files.Cache
{

/**
 * Handle the mapping between the string and numeric storage ids
 *
 * Each storage has 2 different ids
 *    a string id which is generated by the storage backend and reflects the configuration of the storage (e.g. "smb://user@host/share")
 *    and a numeric storage id which is referenced in the file cache
 *
 * A mapping between the two storage ids is stored in the database and accessible trough this class
 *
 * @package OC\Files\Cache
 */
    class StorageGlobal {
        /** @var IDBConnection */
        private IDBConnection connection;

        /** @var array[] */
        private IList<string> cache = new List<string>();

        public StorageGlobal(IDBConnection connection) {
            this.connection = connection;
        }

        /**
         * @param string[] storageIds
         */
        public void loadForStorageIds(IList<string> storageIds) {
            using (var context = new NCContext())
            {
                // TODO @focus
                context.Storages.Select()
            }
            var builder = this.connection.getQueryBuilder();
            var query = builder.select(["id", "numeric_id", "available", "last_checked"])
                .from("storages")
                .where(builder.expr().in("id", builder.createNamedParameter(array_values(storageIds), IQueryBuilder::PARAM_STR_ARRAY)));

            result = query.execute();
            while (row = result.fetch()) {
                this.cache[row["id"]] = row;
            }
        }

        /**
         * @param string storageId
         * @return array|null
         */
        public function getStorageInfo(storageId) {
            if (!isset(this.cache[storageId])) {
                this.loadForStorageIds([storageId]);
            }
            return isset(this.cache[storageId]) ? this.cache[storageId] : null;
        }

        public function clearCache() {
            this.cache = [];
        }
    }

}