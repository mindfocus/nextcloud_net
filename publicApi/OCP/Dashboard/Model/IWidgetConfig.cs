using System;
using System.Collections.Generic;
using System.Text;

namespace OCP.Dashboard.Model
{
/**
 * Interface IWidgetConfig
 *
 * This object contains the configuration of a widget for a userId
 *
 * @see IDashboardWidget::loadWidget
 *
 * @since 15.0.0
 *
 * @package OCP\Dashboard\Model
 */
    public interface IWidgetConfig {


        /**
         * Returns the userId
         *
         * @since 15.0.0
         *
         * @return string
         */
        string getUserId();


        /**
         * Returns the widgetId
         *
         * @since 15.0.0
         *
         * @return string
         */
        string getWidgetId();


        /**
         * Returns the current position and the current size of the widget as
         * displayed on the user's dashboard
         *
         * The returned value is an array:
         * [
         *   'x'      => (int) position on the X axis,
         *   'y'      => (int) position on the Y axis,
         *   'width'  => (int) width of the widget,
         *   'height' => (int) height of the widget
         * ]
         *
         * @since 15.0.0
         *
         * @return array
         */
        IList<string> getPosition();


        /**
         * Returns an array with the settings defined by the user for the widget.
         * The returned value is an array, with setting used as keys:
         *
         * [
         *   'setting1'  => 'any value',
         *   'setting2'  => 'other value'
         * ]
         *
         * Each setting that can be edited by a user should be defined in a
         * WidgetSetting.
         *
         * @see WidgetSetting
         *
         * Those WidgetSetting are in the WidgetTemplate defined during the setup
         * of the widget in the IDashboardWidget.
         *
         * @see IDashboardWidget::getWidgetTemplate
         * @see WidgetTemplate
         *
         * When using this framework, the settings interface is generated by the
         * Dashboard app.
         *
         * @since 15.0.0
         *
         * @return array
         */
        IList<string> getSettings();


        /**
         * Returns if the widget is enabled/displayed in this user's dashboard.
         *
         * @since 15.0.0
         *
         * @return bool
         */
        bool isEnabled();


    }


}
